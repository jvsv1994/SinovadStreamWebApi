// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SinovadDemo.Domain.Entities;

#nullable disable

namespace SinovadDemo.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230817164452_170820232")]
    partial class _170820232
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Generic.Core.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IconTypeCatalogDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("IconTypeCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menu", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Enabled = true,
                            Guid = new Guid("c0c51d5b-d720-4e69-81fb-caf2e35ec1f1"),
                            ParentId = 0,
                            SortOrder = 1,
                            Title = "General"
                        },
                        new
                        {
                            Id = 2,
                            Enabled = true,
                            Guid = new Guid("ec28a69e-ea0b-436d-a39c-9f1879bc23a6"),
                            ParentId = 0,
                            SortOrder = 2,
                            Title = "Movie Data Base"
                        },
                        new
                        {
                            Id = 3,
                            Enabled = true,
                            Guid = new Guid("1045ec6d-ff83-461d-857b-33b1be03901f"),
                            IconClass = "fa-solid fa-list-check",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 1,
                            Path = "/manage/roles",
                            SortOrder = 1,
                            Title = "Roles"
                        },
                        new
                        {
                            Id = 4,
                            Enabled = true,
                            Guid = new Guid("d0a2a3a3-4bfc-4510-a015-c02c4e5161d8"),
                            IconClass = "fa-solid fa-user",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 1,
                            Path = "/manage/users",
                            SortOrder = 2,
                            Title = "Usuarios"
                        },
                        new
                        {
                            Id = 5,
                            Enabled = true,
                            Guid = new Guid("350d6777-7411-4de3-a250-463b6f960019"),
                            IconClass = "fa-solid fa-list-check",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 1,
                            Path = "/manage/menus",
                            SortOrder = 3,
                            Title = "Menu"
                        },
                        new
                        {
                            Id = 6,
                            Enabled = true,
                            Guid = new Guid("ac36ab75-f680-4002-880f-52b506d5ea8e"),
                            IconClass = "fa-solid fa-film",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 2,
                            Path = "/manage/movies",
                            SortOrder = 1,
                            Title = "Peliculas"
                        },
                        new
                        {
                            Id = 7,
                            Enabled = true,
                            Guid = new Guid("a215bf4b-84e2-4a36-a3ca-afe8c01b0257"),
                            IconClass = "fa-solid fa-tv",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 2,
                            Path = "/manage/tvseries",
                            SortOrder = 2,
                            Title = "Series"
                        },
                        new
                        {
                            Id = 8,
                            Enabled = true,
                            Guid = new Guid("86c65d2b-5bcf-430f-a53b-01b1e8e64646"),
                            IconClass = "fa-solid fa-list-check",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 2,
                            Path = "/manage/genres",
                            SortOrder = 3,
                            Title = "Generos"
                        });
                });

            modelBuilder.Entity("Generic.Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Enabled = true,
                            Guid = new Guid("caf1897a-055e-4ef0-802d-cff8c85bde95"),
                            Name = "Administrador Principal"
                        },
                        new
                        {
                            Id = 2,
                            Enabled = true,
                            Guid = new Guid("c22be4b2-a2b5-4c55-8a9d-28852e5f6d0d"),
                            Name = "Administrador de Medios"
                        });
                });

            modelBuilder.Entity("Generic.Core.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("RoleMenu", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("RoleMenu", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            MenuId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 5
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 6
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 7
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 8
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 6
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 7
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 8
                        });
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__Catalog__3214EC275C8D2947");

                    b.ToTable("Catalog", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Guid = new Guid("cb9e7875-16de-4a6c-853a-316fe961d100"),
                            Name = "Estado del Servidor Multimedia"
                        },
                        new
                        {
                            Id = 2,
                            Guid = new Guid("2ac21f1b-dfbb-4bea-94ca-39227cd46acb"),
                            Name = "Tipos de contenido Multimedia "
                        },
                        new
                        {
                            Id = 3,
                            Guid = new Guid("5478d4af-e7b2-4fef-ad9d-623061f2be4e"),
                            Name = "Tipos de transmisión de Video"
                        },
                        new
                        {
                            Id = 4,
                            Guid = new Guid("2cf33662-b1ed-4d21-8d81-130af7d67446"),
                            Name = "Preajuste del transcodificador"
                        },
                        new
                        {
                            Id = 5,
                            Guid = new Guid("64688ce0-6271-4f9f-a4c2-501556befe33"),
                            Name = "Tipo de Icono"
                        },
                        new
                        {
                            Id = 6,
                            Guid = new Guid("450ecf02-3df0-420b-b64e-4af3f7318e71"),
                            Name = "Tipo de Cuenta Vinculada"
                        });
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.CatalogDetail", b =>
                {
                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("NumberValue")
                        .HasColumnType("int");

                    b.Property<string>("TextValue")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("CatalogId", "Id")
                        .HasName("PK__CatalogD__5C6FE914EF292CEC");

                    b.ToTable("CatalogDetail", (string)null);

                    b.HasData(
                        new
                        {
                            CatalogId = 1,
                            Id = 1,
                            Guid = new Guid("decb1efb-8672-42f3-8343-97f96980ebc5"),
                            Name = "Iniciado"
                        },
                        new
                        {
                            CatalogId = 1,
                            Id = 2,
                            Guid = new Guid("106baeb0-c8db-4cda-b02c-25c3c3550470"),
                            Name = "Pausado"
                        },
                        new
                        {
                            CatalogId = 2,
                            Id = 1,
                            Guid = new Guid("ba40adab-2c96-43f4-8f23-e60d7a78dc4c"),
                            Name = "Película"
                        },
                        new
                        {
                            CatalogId = 2,
                            Id = 2,
                            Guid = new Guid("148c92a7-3628-4e4d-aaa8-1a4b4b22f76b"),
                            Name = "Serie de TV"
                        },
                        new
                        {
                            CatalogId = 3,
                            Id = 1,
                            Guid = new Guid("94f83734-022c-470e-b2ea-29095e679dd7"),
                            Name = "Normal"
                        },
                        new
                        {
                            CatalogId = 3,
                            Id = 2,
                            Guid = new Guid("53e2e951-cf87-490e-b7c9-3ae3a45b5cf0"),
                            Name = "MPEG-DASH"
                        },
                        new
                        {
                            CatalogId = 3,
                            Id = 3,
                            Guid = new Guid("06ff0c1e-3f6a-4d50-b5de-ede2d224eb1c"),
                            Name = "HLS"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 1,
                            Guid = new Guid("ac9cf7eb-4151-4700-8ccc-d2456140f2eb"),
                            Name = "ultrafast",
                            TextValue = "ultrafast"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 2,
                            Guid = new Guid("95643227-895b-4c8a-b0af-f37cd5f0fba7"),
                            Name = "superfast",
                            TextValue = "superfast"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 3,
                            Guid = new Guid("52b0fad1-ef5f-4b8c-8a06-04c2768e6b41"),
                            Name = "veryfast",
                            TextValue = "veryfast"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 4,
                            Guid = new Guid("69ae6368-4615-4ce3-a8e8-b59408ee7996"),
                            Name = "faster",
                            TextValue = "faster"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 5,
                            Guid = new Guid("71f9f215-f8c7-481f-a5b4-03dc27c1efae"),
                            Name = "fast",
                            TextValue = "fast"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 6,
                            Guid = new Guid("ad81aa89-1956-4b50-9947-84dc3c67cc70"),
                            Name = "medium",
                            TextValue = "medium"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 7,
                            Guid = new Guid("c57562ce-8fcd-49aa-b17d-247d6a811b63"),
                            Name = "slow",
                            TextValue = "slow"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 8,
                            Guid = new Guid("b8229599-1a2c-4b30-8e7f-0628254f2b7f"),
                            Name = "slower",
                            TextValue = "slower"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 9,
                            Guid = new Guid("b9c9b08d-6387-464d-acfa-9f40b75098c3"),
                            Name = "veryslow",
                            TextValue = "veryslow"
                        },
                        new
                        {
                            CatalogId = 5,
                            Id = 1,
                            Guid = new Guid("ddc12cde-c230-489f-ab23-7d5814a40d4f"),
                            Name = "Imagen"
                        },
                        new
                        {
                            CatalogId = 5,
                            Id = 2,
                            Guid = new Guid("a501837b-5f13-450a-aab0-8740f01fdb2a"),
                            Name = "Font Awesome"
                        },
                        new
                        {
                            CatalogId = 6,
                            Id = 1,
                            Guid = new Guid("34d37fb3-ee4e-46f4-a599-515c712e5e79"),
                            Name = "Google"
                        },
                        new
                        {
                            CatalogId = 6,
                            Id = 2,
                            Guid = new Guid("6b4ed960-5b82-49e0-9c8d-3cddafe20d17"),
                            Name = "Facebook"
                        },
                        new
                        {
                            CatalogId = 6,
                            Id = 3,
                            Guid = new Guid("fc3ad82f-1cfd-4da8-9d83-d145f1b595aa"),
                            Name = "Apple"
                        });
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__Episode__3214EC27EA0C7DAB");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episode", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TmdbId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Genre__3214EC274FE83434");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.LinkedAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedAccountTypeCatalogDetailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedAccountTypeCatalogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__LinkedAccount__3214EC27B7871CE4");

                    b.HasIndex("UserId");

                    b.ToTable("LinkedAccount", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MediaServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("PublicIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateCatalogDetailId")
                        .HasColumnType("int");

                    b.Property<int>("StateCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__MediaServer__3214EC27FF56ACAD");

                    b.HasIndex("UserId");

                    b.ToTable("MediaServer", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("Adult")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Directors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("Imdbid")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OriginalTitle")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Overview")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TmdbId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Movie__3214EC27293CDB91");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenre", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<int?>("Pincode")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Profile__3214EC27B7871CE4");

                    b.HasIndex("UserId");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("TvSerieId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Season__3214EC27FB52A288");

                    b.HasIndex("TvSerieId");

                    b.ToTable("Season", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Directors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("FirstAirDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastAirDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Overview")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("TmdbId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__TvSerie__3214EC27895BB3B8");

                    b.ToTable("TvSerie", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerieGenre", b =>
                {
                    b.Property<int>("TvSerieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvSerieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("TvSerieGenre", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Generic.Core.Models.UserRole", b =>
                {
                    b.HasOne("Generic.Core.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinovadDemo.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Generic.Core.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleMenu", b =>
                {
                    b.HasOne("Generic.Core.Models.Menu", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Generic.Core.Models.Role", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.CatalogDetail", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Catalog", "Catalog")
                        .WithMany("CatalogDetails")
                        .HasForeignKey("CatalogId")
                        .IsRequired()
                        .HasConstraintName("FK_CatalogDetail_Catalog_ID");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Episode", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .IsRequired()
                        .HasConstraintName("FK_Episode_Season_ID");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.LinkedAccount", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", "User")
                        .WithMany("LinkedAccounts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_LinkedAccount_User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MediaServer", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", "User")
                        .WithMany("MediaServers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_MediaServer_User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MovieGenre", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieGenre_Genre_ID");

                    b.HasOne("SinovadDemo.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieGenre_Movie_ID");

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Profile", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Profile_User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Season", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.TvSerie", "TvSerie")
                        .WithMany("Seasons")
                        .HasForeignKey("TvSerieId")
                        .IsRequired()
                        .HasConstraintName("FK_Season_TvSerie_ID");

                    b.Navigation("TvSerie");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerieGenre", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Genre", "Genre")
                        .WithMany("TvSerieGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_TvSerieGenre_Genre_ID");

                    b.HasOne("SinovadDemo.Domain.Entities.TvSerie", "TvSerie")
                        .WithMany("TvSerieGenres")
                        .HasForeignKey("TvSerieId")
                        .IsRequired()
                        .HasConstraintName("FK_TvSerieGenre_TvSerie_ID");

                    b.Navigation("Genre");

                    b.Navigation("TvSerie");
                });

            modelBuilder.Entity("Generic.Core.Models.Menu", b =>
                {
                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("Generic.Core.Models.Role", b =>
                {
                    b.Navigation("RoleMenus");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Catalog", b =>
                {
                    b.Navigation("CatalogDetails");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Genre", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("TvSerieGenres");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Movie", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerie", b =>
                {
                    b.Navigation("Seasons");

                    b.Navigation("TvSerieGenres");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.User", b =>
                {
                    b.Navigation("LinkedAccounts");

                    b.Navigation("MediaServers");

                    b.Navigation("Profiles");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
