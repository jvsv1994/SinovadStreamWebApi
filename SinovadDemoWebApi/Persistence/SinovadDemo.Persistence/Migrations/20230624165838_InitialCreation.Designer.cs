// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SinovadDemo.Domain.Entities;

#nullable disable

namespace SinovadDemo.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230624165838_InitialCreation")]
    partial class InitialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.AccountServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Account_ID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HostUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateCatalogDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("State_Catalog_Detail_ID")
                        .HasDefaultValueSql("((2))");

                    b.Property<int>("StateCatalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("State_Catalog_ID")
                        .HasDefaultValueSql("((3))");

                    b.HasKey("Id")
                        .HasName("PK__AccountS__3214EC27FF56ACAD");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountServer", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.AccountStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountServerId")
                        .HasColumnType("int")
                        .HasColumnName("AccountServer_ID");

                    b.Property<int>("AccountStorageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AccountStorageType_ID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhisicalPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__AccountS__3214EC27C8AEFD60");

                    b.HasIndex("AccountServerId");

                    b.ToTable("AccountStorage", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__Catalog__3214EC275C8D2947");

                    b.ToTable("Catalog", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.CatalogDetail", b =>
                {
                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnName("Catalog_ID");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("NumberValue")
                        .HasColumnType("int");

                    b.Property<string>("TextValue")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("CatalogId", "Id")
                        .HasName("PK__CatalogD__5C6FE914EF292CEC");

                    b.ToTable("CatalogDetail", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int")
                        .HasColumnName("Season_ID");

                    b.Property<string>("Summary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__Episode__3214EC27EA0C7DAB");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episode", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TmdbId")
                        .HasColumnType("int")
                        .HasColumnName("TMDbID");

                    b.HasKey("Id")
                        .HasName("PK__Genre__3214EC274FE83434");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("Adult")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Directors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Imdbid")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("IMDBID");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OriginalTitle")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Overview")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TmdbId")
                        .HasColumnType("int")
                        .HasColumnName("TMDbID");

                    b.HasKey("Id")
                        .HasName("PK__Movie__3214EC27293CDB91");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("Genre_ID");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.HasKey("Id")
                        .HasName("PK__MovieGen__3214EC277F0023A9");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenre", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Account_ID");

                    b.Property<string>("AvatarPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<int?>("Pincode")
                        .HasColumnType("int")
                        .HasColumnName("PINCode");

                    b.HasKey("Id")
                        .HasName("PK__Profile__3214EC27B7871CE4");

                    b.HasIndex("AccountId");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("TvSerieId")
                        .HasColumnType("int")
                        .HasColumnName("TvSerie_ID");

                    b.HasKey("Id")
                        .HasName("PK__Season__3214EC27FB52A288");

                    b.HasIndex("TvSerieId");

                    b.ToTable("Season", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TranscodeSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountServerId")
                        .HasColumnType("int")
                        .HasColumnName("AccountServer_ID");

                    b.Property<int>("ConstantRateFactor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectoryPhysicalPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PresetCatalogDetailId")
                        .HasColumnType("int")
                        .HasColumnName("Preset_Catalog_Detail_ID");

                    b.Property<int>("PresetCatalogId")
                        .HasColumnType("int")
                        .HasColumnName("Preset_Catalog_ID");

                    b.Property<int>("TransmissionMethodCatalogDetailId")
                        .HasColumnType("int")
                        .HasColumnName("Transmission_Method_Catalog_Detail_ID");

                    b.Property<int>("TransmissionMethodCatalogId")
                        .HasColumnType("int")
                        .HasColumnName("Transmission_Method_Catalog_ID");

                    b.HasKey("Id")
                        .HasName("PK__Transcod__3214EC279D19B237");

                    b.HasIndex("AccountServerId");

                    b.ToTable("TranscodeSettings");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TranscodeVideoProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountServerId")
                        .HasColumnType("int")
                        .HasColumnName("AccountServer_ID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("GUID");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TranscodeAudioVideoProcessId")
                        .HasColumnType("int")
                        .HasColumnName("TranscodeAudioVideoProcessID");

                    b.Property<int?>("TranscodeSubtitlesProcessId")
                        .HasColumnType("int")
                        .HasColumnName("TranscodeSubtitlesProcessID");

                    b.Property<string>("WorkingDirectoryPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__Transcod__3214EC27DF052101");

                    b.ToTable("TranscodeVideoProcess", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Directors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("FirstAirDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastAirDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Overview")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("TmdbId")
                        .HasColumnType("int")
                        .HasColumnName("TMDbID");

                    b.HasKey("Id")
                        .HasName("PK__TvSerie__3214EC27895BB3B8");

                    b.ToTable("TvSerie", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("Genre_ID");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TvSerieId")
                        .HasColumnType("int")
                        .HasColumnName("TvSerie_ID");

                    b.HasKey("Id")
                        .HasName("PK__TvSerieG__3214EC276D0EA328");

                    b.HasIndex("GenreId");

                    b.HasIndex("TvSerieId");

                    b.ToTable("TvSerieGenre", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountStorageId")
                        .HasColumnType("int")
                        .HasColumnName("AccountStorage_ID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("int")
                        .HasColumnName("Episode_ID");

                    b.Property<int?>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.Property<string>("PhysicalPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("TvSerieId")
                        .HasColumnType("int")
                        .HasColumnName("TvSerie_ID");

                    b.HasKey("Id")
                        .HasName("PK__Video__3214EC2725862FD1");

                    b.ToTable("Video", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.VideoProfile", b =>
                {
                    b.Property<int>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("Video_ID");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("Profile_ID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CurrentTime")
                        .HasColumnType("float");

                    b.Property<double>("DurationTime")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VideoId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("VideoProfile", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.AccountServer", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.AppUser", "Account")
                        .WithMany("AccountServers")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountServer_Account_ID");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.AccountStorage", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.AccountServer", "AccountServer")
                        .WithMany("AccountStorages")
                        .HasForeignKey("AccountServerId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountStorage_AccountServer_ID");

                    b.Navigation("AccountServer");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.CatalogDetail", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Catalog", "Catalog")
                        .WithMany("CatalogDetails")
                        .HasForeignKey("CatalogId")
                        .IsRequired()
                        .HasConstraintName("FK_CatalogDetail_Catalog_ID");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Episode", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .IsRequired()
                        .HasConstraintName("FK_Episode_Season_ID");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MovieGenre", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieGenre_Genre_ID");

                    b.HasOne("SinovadDemo.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieGenre_Movie_ID");

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Profile", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.AppUser", "Account")
                        .WithMany("Profiles")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Profile_Account_ID");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Season", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.TvSerie", "TvSerie")
                        .WithMany("Seasons")
                        .HasForeignKey("TvSerieId")
                        .IsRequired()
                        .HasConstraintName("FK_Season_TvSerie_ID");

                    b.Navigation("TvSerie");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TranscodeSetting", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.AccountServer", "AccountServer")
                        .WithMany("TranscodeSettings")
                        .HasForeignKey("AccountServerId")
                        .IsRequired()
                        .HasConstraintName("FK_TranscodeSettings_AccountServer_ID");

                    b.Navigation("AccountServer");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerieGenre", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Genre", "Genre")
                        .WithMany("TvSerieGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_TvSerieGenre_Genre_ID");

                    b.HasOne("SinovadDemo.Domain.Entities.TvSerie", "TvSerie")
                        .WithMany("TvSerieGenres")
                        .HasForeignKey("TvSerieId")
                        .IsRequired()
                        .HasConstraintName("FK_TvSerieGenre_TvSerie_ID");

                    b.Navigation("Genre");

                    b.Navigation("TvSerie");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.VideoProfile", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Profile", "Profile")
                        .WithMany("VideoProfiles")
                        .HasForeignKey("ProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_VideoProfileProfile");

                    b.HasOne("SinovadDemo.Domain.Entities.Video", "Video")
                        .WithMany("VideoProfiles")
                        .HasForeignKey("VideoId")
                        .IsRequired()
                        .HasConstraintName("FK_VideoProfileVideo");

                    b.Navigation("Profile");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.AccountServer", b =>
                {
                    b.Navigation("AccountStorages");

                    b.Navigation("TranscodeSettings");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Catalog", b =>
                {
                    b.Navigation("CatalogDetails");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Genre", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("TvSerieGenres");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Movie", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Profile", b =>
                {
                    b.Navigation("VideoProfiles");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerie", b =>
                {
                    b.Navigation("Seasons");

                    b.Navigation("TvSerieGenres");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Video", b =>
                {
                    b.Navigation("VideoProfiles");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("AccountServers");

                    b.Navigation("Profiles");
                });
#pragma warning restore 612, 618
        }
    }
}
