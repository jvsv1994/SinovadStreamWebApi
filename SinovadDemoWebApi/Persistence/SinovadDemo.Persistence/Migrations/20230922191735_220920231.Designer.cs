// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SinovadDemo.Domain.Entities;

#nullable disable

namespace SinovadDemo.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230922191735_220920231")]
    partial class _220920231
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Generic.Core.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IconTypeCatalogDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("IconTypeCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menu", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Enabled = true,
                            Guid = new Guid("c91d07c2-de15-44d2-9bb4-dec1bde10683"),
                            ParentId = 0,
                            SortOrder = 1,
                            Title = "General"
                        },
                        new
                        {
                            Id = 2,
                            Enabled = true,
                            Guid = new Guid("ae7846b3-1c6d-45b2-8855-c151c6585b8f"),
                            ParentId = 0,
                            SortOrder = 2,
                            Title = "Movie Data Base"
                        },
                        new
                        {
                            Id = 3,
                            Enabled = true,
                            Guid = new Guid("09700630-6626-4d9c-aaae-88da50e820fb"),
                            IconClass = "fa-solid fa-list-check",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 1,
                            Path = "/manage/roles",
                            SortOrder = 1,
                            Title = "Roles"
                        },
                        new
                        {
                            Id = 4,
                            Enabled = true,
                            Guid = new Guid("b2d6fe3d-3be3-4569-b370-dc218b5c78d9"),
                            IconClass = "fa-solid fa-user",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 1,
                            Path = "/manage/users",
                            SortOrder = 2,
                            Title = "Usuarios"
                        },
                        new
                        {
                            Id = 5,
                            Enabled = true,
                            Guid = new Guid("15e74e84-7550-49f1-a095-9528b78df1ea"),
                            IconClass = "fa-solid fa-list-check",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 1,
                            Path = "/manage/menus",
                            SortOrder = 3,
                            Title = "Menu"
                        },
                        new
                        {
                            Id = 6,
                            Enabled = true,
                            Guid = new Guid("9986bf6d-f36f-4c5b-9d90-81f3373fb7c8"),
                            IconClass = "fa-solid fa-list-check",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 1,
                            Path = "/manage/catalogs",
                            SortOrder = 3,
                            Title = "Catálogos"
                        },
                        new
                        {
                            Id = 7,
                            Enabled = true,
                            Guid = new Guid("9b3a0005-de88-4353-a3bd-f67a42ca0a26"),
                            IconClass = "fa-solid fa-film",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 2,
                            Path = "/manage/movies",
                            SortOrder = 1,
                            Title = "Peliculas"
                        },
                        new
                        {
                            Id = 8,
                            Enabled = true,
                            Guid = new Guid("ded35c3e-8377-4acb-8c5b-9b8ffd12aee3"),
                            IconClass = "fa-solid fa-tv",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 2,
                            Path = "/manage/tvseries",
                            SortOrder = 2,
                            Title = "Series"
                        },
                        new
                        {
                            Id = 9,
                            Enabled = true,
                            Guid = new Guid("e1064b3b-588d-4e18-9f70-d6e8f54f9fa6"),
                            IconClass = "fa-solid fa-list-check",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 2,
                            Path = "/manage/genres",
                            SortOrder = 3,
                            Title = "Generos"
                        });
                });

            modelBuilder.Entity("Generic.Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Enabled = true,
                            Guid = new Guid("2078819e-6454-4706-96f6-b76e6d0da6c3"),
                            Name = "Administrador Principal"
                        },
                        new
                        {
                            Id = 2,
                            Enabled = true,
                            Guid = new Guid("2a751515-a1cc-4842-9f9b-c513eb94376d"),
                            Name = "Administrador de Medios"
                        });
                });

            modelBuilder.Entity("Generic.Core.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("RoleMenu", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<bool>("AllowCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowRead")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUpdate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("RoleMenu", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            MenuId = 1,
                            AllowCreate = false,
                            AllowDelete = false,
                            AllowRead = false,
                            AllowUpdate = false,
                            Enabled = false
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 2,
                            AllowCreate = false,
                            AllowDelete = false,
                            AllowRead = false,
                            AllowUpdate = false,
                            Enabled = false
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 3,
                            AllowCreate = false,
                            AllowDelete = false,
                            AllowRead = false,
                            AllowUpdate = false,
                            Enabled = false
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 4,
                            AllowCreate = false,
                            AllowDelete = false,
                            AllowRead = false,
                            AllowUpdate = false,
                            Enabled = false
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 5,
                            AllowCreate = false,
                            AllowDelete = false,
                            AllowRead = false,
                            AllowUpdate = false,
                            Enabled = false
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 6,
                            AllowCreate = false,
                            AllowDelete = false,
                            AllowRead = false,
                            AllowUpdate = false,
                            Enabled = false
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 7,
                            AllowCreate = false,
                            AllowDelete = false,
                            AllowRead = false,
                            AllowUpdate = false,
                            Enabled = false
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 8,
                            AllowCreate = false,
                            AllowDelete = false,
                            AllowRead = false,
                            AllowUpdate = false,
                            Enabled = false
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 9,
                            AllowCreate = false,
                            AllowDelete = false,
                            AllowRead = false,
                            AllowUpdate = false,
                            Enabled = false
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 2,
                            AllowCreate = false,
                            AllowDelete = false,
                            AllowRead = false,
                            AllowUpdate = false,
                            Enabled = false
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 7,
                            AllowCreate = false,
                            AllowDelete = false,
                            AllowRead = false,
                            AllowUpdate = false,
                            Enabled = false
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 8,
                            AllowCreate = false,
                            AllowDelete = false,
                            AllowRead = false,
                            AllowUpdate = false,
                            Enabled = false
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 9,
                            AllowCreate = false,
                            AllowDelete = false,
                            AllowRead = false,
                            AllowUpdate = false,
                            Enabled = false
                        });
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__Catalog__3214EC275C8D2947");

                    b.ToTable("Catalog", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Guid = new Guid("58ab39f8-ee78-4459-96c1-2785a3e1009c"),
                            Name = "Estado del Servidor Multimedia"
                        },
                        new
                        {
                            Id = 2,
                            Guid = new Guid("0aa0af19-e2a8-4422-89f3-e9886665b9ef"),
                            Name = "Tipos de contenido Multimedia "
                        },
                        new
                        {
                            Id = 3,
                            Guid = new Guid("15020d35-bbcd-4e92-ac6e-188cb3f9c038"),
                            Name = "Tipos de transmisión de Video"
                        },
                        new
                        {
                            Id = 4,
                            Guid = new Guid("4ede7871-e576-43fe-897d-d0af71161ac4"),
                            Name = "Preajuste del transcodificador"
                        },
                        new
                        {
                            Id = 5,
                            Guid = new Guid("55f4706c-96f9-4959-b1bb-df6b3fce5054"),
                            Name = "Tipo de Icono"
                        },
                        new
                        {
                            Id = 6,
                            Guid = new Guid("bae2d16d-65a3-425a-8a81-1ed45b0e9497"),
                            Name = "Proveedor de Cuenta Vinculada"
                        });
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.CatalogDetail", b =>
                {
                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("NumberValue")
                        .HasColumnType("int");

                    b.Property<string>("TextValue")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("CatalogId", "Id")
                        .HasName("PK__CatalogD__5C6FE914EF292CEC");

                    b.ToTable("CatalogDetail", (string)null);

                    b.HasData(
                        new
                        {
                            CatalogId = 1,
                            Id = 1,
                            Guid = new Guid("c09df2eb-a285-419b-8502-cc6adcee9c1d"),
                            Name = "Iniciado"
                        },
                        new
                        {
                            CatalogId = 1,
                            Id = 2,
                            Guid = new Guid("a105749e-6798-49e9-acc8-295a148bab29"),
                            Name = "Pausado"
                        },
                        new
                        {
                            CatalogId = 2,
                            Id = 1,
                            Guid = new Guid("9c74104b-da4b-4f2b-b1fe-163d282f350c"),
                            Name = "Película"
                        },
                        new
                        {
                            CatalogId = 2,
                            Id = 2,
                            Guid = new Guid("f03622da-becc-4139-9b5a-938686fbf052"),
                            Name = "Serie de TV"
                        },
                        new
                        {
                            CatalogId = 3,
                            Id = 1,
                            Guid = new Guid("dda2242e-8af8-451f-8ca1-abd1435025ce"),
                            Name = "Normal"
                        },
                        new
                        {
                            CatalogId = 3,
                            Id = 2,
                            Guid = new Guid("e1a82bb5-8ab8-4135-8594-940a612e17be"),
                            Name = "MPEG-DASH"
                        },
                        new
                        {
                            CatalogId = 3,
                            Id = 3,
                            Guid = new Guid("aa3e3475-cdb6-4545-b641-87d8de98e77d"),
                            Name = "HLS"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 1,
                            Guid = new Guid("7375736c-9510-4da3-8a92-ef6866bf887c"),
                            Name = "ultrafast",
                            TextValue = "ultrafast"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 2,
                            Guid = new Guid("c14eca21-68b7-4651-a977-7cc66358952d"),
                            Name = "superfast",
                            TextValue = "superfast"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 3,
                            Guid = new Guid("4ff69175-f4e3-47a6-981b-bc26bbce6964"),
                            Name = "veryfast",
                            TextValue = "veryfast"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 4,
                            Guid = new Guid("e1f974f9-8177-4eac-9392-635d264f87fe"),
                            Name = "faster",
                            TextValue = "faster"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 5,
                            Guid = new Guid("f0f48fc0-5e9c-4fd2-a8cd-7a69bcf3c336"),
                            Name = "fast",
                            TextValue = "fast"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 6,
                            Guid = new Guid("45847ec2-4c9a-43b9-9a1a-9009c8608a46"),
                            Name = "medium",
                            TextValue = "medium"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 7,
                            Guid = new Guid("6f280859-47ba-4714-a16b-86d08d1d9567"),
                            Name = "slow",
                            TextValue = "slow"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 8,
                            Guid = new Guid("74df0a4f-49c3-4170-9ae7-4d453d9b4151"),
                            Name = "slower",
                            TextValue = "slower"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 9,
                            Guid = new Guid("544847e7-25e3-448e-af39-63f063071679"),
                            Name = "veryslow",
                            TextValue = "veryslow"
                        },
                        new
                        {
                            CatalogId = 5,
                            Id = 1,
                            Guid = new Guid("f32a28c5-e10f-46b7-8f5d-5cc703f76acb"),
                            Name = "Imagen"
                        },
                        new
                        {
                            CatalogId = 5,
                            Id = 2,
                            Guid = new Guid("d8c008aa-4bde-4355-a9dc-d3c9c3045c13"),
                            Name = "Font Awesome"
                        },
                        new
                        {
                            CatalogId = 6,
                            Id = 1,
                            Guid = new Guid("3cebe94c-2b71-4c9d-ba0b-8782f062cabd"),
                            Name = "Google"
                        },
                        new
                        {
                            CatalogId = 6,
                            Id = 2,
                            Guid = new Guid("c6502cea-f14c-47ac-a5e3-56e15c585433"),
                            Name = "Facebook"
                        },
                        new
                        {
                            CatalogId = 6,
                            Id = 3,
                            Guid = new Guid("7c6867b2-dc83-43f7-b609-e4621e11510c"),
                            Name = "Apple"
                        });
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__Episode__3214EC27EA0C7DAB");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episode", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TmdbId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Genre__3214EC274FE83434");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.LinkedAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkedAccountProviderCatalogDetailId")
                        .HasColumnType("int");

                    b.Property<int>("LinkedAccountProviderCatalogId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__LinkedAccount__3214EC27B7871CE4");

                    b.HasIndex("UserId");

                    b.ToTable("LinkedAccount", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MediaServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("PublicIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateCatalogDetailId")
                        .HasColumnType("int");

                    b.Property<int>("StateCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__MediaServer__3214EC27FF56ACAD");

                    b.HasIndex("UserId");

                    b.ToTable("MediaServer", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("Adult")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Directors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("Imdbid")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OriginalTitle")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Overview")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TmdbId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Movie__3214EC27293CDB91");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenre", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<int?>("Pincode")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Profile__3214EC27B7871CE4");

                    b.HasIndex("UserId");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("TvSerieId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Season__3214EC27FB52A288");

                    b.HasIndex("TvSerieId");

                    b.ToTable("Season", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Directors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("FirstAirDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastAirDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Overview")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("TmdbId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__TvSerie__3214EC27895BB3B8");

                    b.ToTable("TvSerie", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerieGenre", b =>
                {
                    b.Property<int>("TvSerieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvSerieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("TvSerieGenre", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Generic.Core.Models.UserRole", b =>
                {
                    b.HasOne("Generic.Core.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinovadDemo.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Generic.Core.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleMenu", b =>
                {
                    b.HasOne("Generic.Core.Models.Menu", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Generic.Core.Models.Role", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.CatalogDetail", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Catalog", "Catalog")
                        .WithMany("CatalogDetails")
                        .HasForeignKey("CatalogId")
                        .IsRequired()
                        .HasConstraintName("FK_CatalogDetail_Catalog_ID");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Episode", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .IsRequired()
                        .HasConstraintName("FK_Episode_Season_ID");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.LinkedAccount", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", "User")
                        .WithMany("LinkedAccounts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_LinkedAccount_User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MediaServer", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", "User")
                        .WithMany("MediaServers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_MediaServer_User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MovieGenre", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieGenre_Genre_ID");

                    b.HasOne("SinovadDemo.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieGenre_Movie_ID");

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Profile", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Profile_User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Season", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.TvSerie", "TvSerie")
                        .WithMany("Seasons")
                        .HasForeignKey("TvSerieId")
                        .IsRequired()
                        .HasConstraintName("FK_Season_TvSerie_ID");

                    b.Navigation("TvSerie");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerieGenre", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Genre", "Genre")
                        .WithMany("TvSerieGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_TvSerieGenre_Genre_ID");

                    b.HasOne("SinovadDemo.Domain.Entities.TvSerie", "TvSerie")
                        .WithMany("TvSerieGenres")
                        .HasForeignKey("TvSerieId")
                        .IsRequired()
                        .HasConstraintName("FK_TvSerieGenre_TvSerie_ID");

                    b.Navigation("Genre");

                    b.Navigation("TvSerie");
                });

            modelBuilder.Entity("Generic.Core.Models.Menu", b =>
                {
                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("Generic.Core.Models.Role", b =>
                {
                    b.Navigation("RoleMenus");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Catalog", b =>
                {
                    b.Navigation("CatalogDetails");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Genre", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("TvSerieGenres");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Movie", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerie", b =>
                {
                    b.Navigation("Seasons");

                    b.Navigation("TvSerieGenres");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.User", b =>
                {
                    b.Navigation("LinkedAccounts");

                    b.Navigation("MediaServers");

                    b.Navigation("Profiles");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
