// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SinovadDemo.Domain.Entities;

#nullable disable

namespace SinovadDemo.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230720175301_Update200720232")]
    partial class Update200720232
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Generic.Core.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IconTypeCatalogDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("IconTypeCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menu", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Enabled = false,
                            Guid = new Guid("c935ba56-b824-4ac2-9977-d58ef439eba0"),
                            ParentId = 0,
                            SortOrder = 1,
                            Title = "Media"
                        },
                        new
                        {
                            Id = 2,
                            Enabled = false,
                            Guid = new Guid("f3097933-94a5-4765-b97c-b89aa9a4c908"),
                            ParentId = 0,
                            SortOrder = 2,
                            Title = "Almacenamiento"
                        },
                        new
                        {
                            Id = 3,
                            Enabled = false,
                            Guid = new Guid("ba7ef023-c3cf-42f5-861d-1b48037d186c"),
                            ParentId = 0,
                            SortOrder = 3,
                            Title = "Mantenimiento"
                        },
                        new
                        {
                            Id = 4,
                            Enabled = true,
                            Guid = new Guid("203db5e5-1013-4118-bf7e-bba79c3e2220"),
                            IconClass = "fa-solid fa-house",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 1,
                            Path = "/home",
                            SortOrder = 1,
                            Title = "Inicio"
                        },
                        new
                        {
                            Id = 5,
                            Enabled = true,
                            Guid = new Guid("4ca90f32-0266-4c82-89a7-ddfe1cab2c7a"),
                            IconClass = "fa-solid fa-film",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 1,
                            Path = "/movies",
                            SortOrder = 2,
                            Title = "Peliculas"
                        },
                        new
                        {
                            Id = 6,
                            Enabled = true,
                            Guid = new Guid("668a115f-86ed-4eb0-a15e-8adad9914b01"),
                            IconClass = "fa-solid fa-tv",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 1,
                            Path = "/tvseries",
                            SortOrder = 3,
                            Title = "Series"
                        },
                        new
                        {
                            Id = 7,
                            Enabled = true,
                            Guid = new Guid("b32e8394-493a-4db2-b3e4-6d5a9895f4c6"),
                            IconClass = "fa-solid fa-database",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 2,
                            Path = "/storages",
                            SortOrder = 1,
                            Title = "Almacenamiento"
                        },
                        new
                        {
                            Id = 8,
                            Enabled = true,
                            Guid = new Guid("3e7f81cc-0b79-4fc1-94e6-4e1b68d3ae0b"),
                            IconClass = "fa-solid fa-database",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 2,
                            Path = "/transcoder",
                            SortOrder = 2,
                            Title = "Transcodificacion"
                        },
                        new
                        {
                            Id = 9,
                            Enabled = true,
                            Guid = new Guid("c7afa879-18cf-485d-a5cb-0d1608e20790"),
                            IconClass = "fa-solid fa-film",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 3,
                            Path = "/movie-list",
                            SortOrder = 5,
                            Title = "Peliculas"
                        },
                        new
                        {
                            Id = 10,
                            Enabled = true,
                            Guid = new Guid("fd73fc82-fc45-4046-9c1f-e5f30a8102a4"),
                            IconClass = "fa-solid fa-tv",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 3,
                            Path = "/tvserie-list",
                            SortOrder = 6,
                            Title = "Series"
                        },
                        new
                        {
                            Id = 11,
                            Enabled = true,
                            Guid = new Guid("5b79d22f-af92-4937-9fb5-78742731fc4f"),
                            IconClass = "fa-solid fa-list-check",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 3,
                            Path = "/genre-list",
                            SortOrder = 4,
                            Title = "Generos"
                        },
                        new
                        {
                            Id = 12,
                            Enabled = true,
                            Guid = new Guid("45325ddf-ea84-4bd6-bf6c-ce8521cceed1"),
                            IconClass = "fa-solid fa-list-check",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 3,
                            Path = "/role-list",
                            SortOrder = 3,
                            Title = "Roles"
                        },
                        new
                        {
                            Id = 13,
                            Enabled = true,
                            Guid = new Guid("be7aa772-0182-4beb-9718-839d17293765"),
                            IconClass = "fa-solid fa-user",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 3,
                            Path = "/user-list",
                            SortOrder = 2,
                            Title = "Usuarios"
                        },
                        new
                        {
                            Id = 14,
                            Enabled = true,
                            Guid = new Guid("cfd51490-6b1e-4faa-9036-a0167f70014f"),
                            IconClass = "fa-solid fa-list-check",
                            IconTypeCatalogDetailId = 2,
                            IconTypeCatalogId = 5,
                            ParentId = 3,
                            Path = "/menu-list",
                            SortOrder = 1,
                            Title = "Menu"
                        });
                });

            modelBuilder.Entity("Generic.Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Enabled = true,
                            Guid = new Guid("977fa132-543e-4112-83fa-0a66037f3211"),
                            Name = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Enabled = true,
                            Guid = new Guid("c72fdbe8-3777-4f46-9b37-7ffbdfaf7bde"),
                            Name = "Registrado"
                        });
                });

            modelBuilder.Entity("Generic.Core.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("RoleMenu", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("RoleMenu", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            MenuId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 5
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 6
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 7
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 8
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 9
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 10
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 11
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 12
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 13
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 14
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 4
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 5
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 6
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 7
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 8
                        });
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__Catalog__3214EC275C8D2947");

                    b.ToTable("Catalog", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Guid = new Guid("f78cf970-7c47-4260-abed-0ab61931c0cf"),
                            Name = "Estado del Servidor Multimedia"
                        },
                        new
                        {
                            Id = 2,
                            Guid = new Guid("33a7bc3b-3523-4fed-b7d2-a107943cb459"),
                            Name = "Tipos de contenido Multimedia "
                        },
                        new
                        {
                            Id = 3,
                            Guid = new Guid("c5b0eb56-5ede-46ca-a286-6a9cecb37048"),
                            Name = "Tipos de transmisión de Video"
                        },
                        new
                        {
                            Id = 4,
                            Guid = new Guid("c94b93f2-7688-4808-ab53-f52c4a4bb7d9"),
                            Name = "Preajuste del transcodificador"
                        },
                        new
                        {
                            Id = 5,
                            Guid = new Guid("542b5ac6-d3ec-4465-81d3-1202a3bb3529"),
                            Name = "Tipo de Icono"
                        });
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.CatalogDetail", b =>
                {
                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("NumberValue")
                        .HasColumnType("int");

                    b.Property<string>("TextValue")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("CatalogId", "Id")
                        .HasName("PK__CatalogD__5C6FE914EF292CEC");

                    b.ToTable("CatalogDetail", (string)null);

                    b.HasData(
                        new
                        {
                            CatalogId = 1,
                            Id = 1,
                            Guid = new Guid("9e3c6527-0d19-41fa-9d15-11afd7cb4b6d"),
                            Name = "Iniciado"
                        },
                        new
                        {
                            CatalogId = 1,
                            Id = 2,
                            Guid = new Guid("a5179b41-1989-43ff-b70c-a798bb6b57f4"),
                            Name = "Pausado"
                        },
                        new
                        {
                            CatalogId = 2,
                            Id = 1,
                            Guid = new Guid("b86ec780-9001-47a8-83f4-18cd6e836e2f"),
                            Name = "Película"
                        },
                        new
                        {
                            CatalogId = 2,
                            Id = 2,
                            Guid = new Guid("cf63d507-5a04-4fa1-90b3-d788ebc52b7f"),
                            Name = "Serie de TV"
                        },
                        new
                        {
                            CatalogId = 3,
                            Id = 1,
                            Guid = new Guid("58270862-ae91-45a8-a4eb-3cbfe2cbf07a"),
                            Name = "Normal"
                        },
                        new
                        {
                            CatalogId = 3,
                            Id = 2,
                            Guid = new Guid("93ba6d99-9c5d-4277-aa9d-4dc879df4c92"),
                            Name = "MPEG-DASH"
                        },
                        new
                        {
                            CatalogId = 3,
                            Id = 3,
                            Guid = new Guid("472897cf-5688-4f83-9635-333b2905f94b"),
                            Name = "HLS"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 1,
                            Guid = new Guid("234dd12f-cdb6-4f29-bdb1-38403484e705"),
                            Name = "ultrafast",
                            TextValue = "ultrafast"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 2,
                            Guid = new Guid("0e8402a5-63a5-48da-896b-50d5619b86f9"),
                            Name = "superfast",
                            TextValue = "superfast"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 3,
                            Guid = new Guid("8801b89d-fa95-447a-a7c0-b739c6e4c0ac"),
                            Name = "veryfast",
                            TextValue = "veryfast"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 4,
                            Guid = new Guid("75aa8d10-e1d9-4b9c-a291-0b2959d494c6"),
                            Name = "faster",
                            TextValue = "faster"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 5,
                            Guid = new Guid("3d1ebab0-51f4-4472-b656-dc0778b07a3a"),
                            Name = "fast",
                            TextValue = "fast"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 6,
                            Guid = new Guid("5607ef7e-8034-42ef-a81b-bae8b75753ec"),
                            Name = "medium",
                            TextValue = "medium"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 7,
                            Guid = new Guid("a03a0500-6a36-45de-9990-bf9c69ce6872"),
                            Name = "slow",
                            TextValue = "slow"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 8,
                            Guid = new Guid("d6936fca-470e-4e7e-a551-3bcc086cf05d"),
                            Name = "slower",
                            TextValue = "slower"
                        },
                        new
                        {
                            CatalogId = 4,
                            Id = 9,
                            Guid = new Guid("bdd06f81-294b-4b19-9cc3-4cecf9c3d27e"),
                            Name = "veryslow",
                            TextValue = "veryslow"
                        },
                        new
                        {
                            CatalogId = 5,
                            Id = 1,
                            Guid = new Guid("057065e3-f59a-4dd2-b3c8-0445f5ee24c2"),
                            Name = "Imagen"
                        },
                        new
                        {
                            CatalogId = 5,
                            Id = 2,
                            Guid = new Guid("4f3209cf-e64c-4b32-8266-b77fc6dbdc51"),
                            Name = "Font Awesome"
                        });
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__Episode__3214EC27EA0C7DAB");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episode", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TmdbId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Genre__3214EC274FE83434");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MediaServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("StateCatalogDetailId")
                        .HasColumnType("int");

                    b.Property<int>("StateCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__MediaServer__3214EC27FF56ACAD");

                    b.HasIndex("UserId");

                    b.ToTable("MediaServer", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("Adult")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Directors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("Imdbid")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OriginalTitle")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Overview")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TmdbId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Movie__3214EC27293CDB91");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenre", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<int?>("Pincode")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Profile__3214EC27B7871CE4");

                    b.HasIndex("UserId");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("TvSerieId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Season__3214EC27FB52A288");

                    b.HasIndex("TvSerieId");

                    b.ToTable("Season", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaServerId")
                        .HasColumnType("int");

                    b.Property<int>("MediaTypeCatalogDetailId")
                        .HasColumnType("int");

                    b.Property<int>("MediaTypeCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__Storage__3214EC27C8AEFD60");

                    b.HasIndex("MediaServerId");

                    b.ToTable("Storage", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TranscoderSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstantRateFactor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaServerId")
                        .HasColumnType("int");

                    b.Property<int>("PresetCatalogDetailId")
                        .HasColumnType("int");

                    b.Property<int>("PresetCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("TemporaryFolder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VideoTransmissionTypeCatalogDetailId")
                        .HasColumnType("int");

                    b.Property<int>("VideoTransmissionTypeCatalogId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Transcod__3214EC279D19B237");

                    b.HasIndex("MediaServerId")
                        .IsUnique();

                    b.ToTable("TranscoderSettings");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TranscodingProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdditionalSystemProcessIdentifier")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("GeneratedTemporaryFolder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaServerId")
                        .HasColumnType("int");

                    b.Property<bool>("PendingDeletion")
                        .HasColumnType("bit");

                    b.Property<Guid>("RequestGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SystemProcessIdentifier")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Transcod__3214EC27DF052101");

                    b.ToTable("TranscodingProcess", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Directors")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("FirstAirDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastAirDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OriginalName")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Overview")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("TmdbId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__TvSerie__3214EC27895BB3B8");

                    b.ToTable("TvSerie", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerieGenre", b =>
                {
                    b.Property<int>("TvSerieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TvSerieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("TvSerieGenre", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int?>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("PhysicalPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<int?>("StorageId")
                        .HasColumnType("int");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("TvSerieId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Video__3214EC2725862FD1");

                    b.ToTable("Video", (string)null);
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.VideoProfile", b =>
                {
                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CurrentTime")
                        .HasColumnType("float");

                    b.Property<double>("DurationTime")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VideoId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("VideoProfile", (string)null);
                });

            modelBuilder.Entity("Generic.Core.Models.UserRole", b =>
                {
                    b.HasOne("Generic.Core.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinovadDemo.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Generic.Core.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleMenu", b =>
                {
                    b.HasOne("Generic.Core.Models.Menu", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Generic.Core.Models.Role", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.CatalogDetail", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Catalog", "Catalog")
                        .WithMany("CatalogDetails")
                        .HasForeignKey("CatalogId")
                        .IsRequired()
                        .HasConstraintName("FK_CatalogDetail_Catalog_ID");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Episode", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .IsRequired()
                        .HasConstraintName("FK_Episode_Season_ID");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MediaServer", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", "User")
                        .WithMany("MediaServers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_MediaServer_User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MovieGenre", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieGenre_Genre_ID");

                    b.HasOne("SinovadDemo.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieGenre_Movie_ID");

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Profile", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Profile_User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Season", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.TvSerie", "TvSerie")
                        .WithMany("Seasons")
                        .HasForeignKey("TvSerieId")
                        .IsRequired()
                        .HasConstraintName("FK_Season_TvSerie_ID");

                    b.Navigation("TvSerie");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Storage", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.MediaServer", "MediaServer")
                        .WithMany("Storages")
                        .HasForeignKey("MediaServerId")
                        .IsRequired()
                        .HasConstraintName("FK_Storage_MediaServer_ID");

                    b.Navigation("MediaServer");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TranscoderSettings", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.MediaServer", "MediaServer")
                        .WithOne("TranscoderSettings")
                        .HasForeignKey("SinovadDemo.Domain.Entities.TranscoderSettings", "MediaServerId")
                        .IsRequired()
                        .HasConstraintName("FK_TranscoderSettings_MediaServer_ID");

                    b.Navigation("MediaServer");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerieGenre", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Genre", "Genre")
                        .WithMany("TvSerieGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_TvSerieGenre_Genre_ID");

                    b.HasOne("SinovadDemo.Domain.Entities.TvSerie", "TvSerie")
                        .WithMany("TvSerieGenres")
                        .HasForeignKey("TvSerieId")
                        .IsRequired()
                        .HasConstraintName("FK_TvSerieGenre_TvSerie_ID");

                    b.Navigation("Genre");

                    b.Navigation("TvSerie");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.VideoProfile", b =>
                {
                    b.HasOne("SinovadDemo.Domain.Entities.Profile", "Profile")
                        .WithMany("VideoProfiles")
                        .HasForeignKey("ProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_VideoProfileProfile");

                    b.HasOne("SinovadDemo.Domain.Entities.Video", "Video")
                        .WithMany("VideoProfiles")
                        .HasForeignKey("VideoId")
                        .IsRequired()
                        .HasConstraintName("FK_VideoProfileVideo");

                    b.Navigation("Profile");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Generic.Core.Models.Menu", b =>
                {
                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("Generic.Core.Models.Role", b =>
                {
                    b.Navigation("RoleMenus");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Catalog", b =>
                {
                    b.Navigation("CatalogDetails");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Genre", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("TvSerieGenres");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.MediaServer", b =>
                {
                    b.Navigation("Storages");

                    b.Navigation("TranscoderSettings");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Movie", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Profile", b =>
                {
                    b.Navigation("VideoProfiles");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.TvSerie", b =>
                {
                    b.Navigation("Seasons");

                    b.Navigation("TvSerieGenres");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.User", b =>
                {
                    b.Navigation("MediaServers");

                    b.Navigation("Profiles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SinovadDemo.Domain.Entities.Video", b =>
                {
                    b.Navigation("VideoProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
